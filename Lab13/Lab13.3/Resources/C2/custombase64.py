import base64

def encode_custom_base64(input_str):
    # Custom Base64 alphabet
    custom_alphabet = "CDEFGHIJKLMNOPQRSTUVWXYZABcdefghijklmnopqrstuvwxyzab0123456789+/"
    
    # Standard Base64 alphabet for translation
    standard_alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    
    encoded_bytes = base64.b64encode(input_str.encode('utf-8'))
    encoded_str = encoded_bytes.decode('utf-8')
    
    # Create a translation table between the custom and standard Base64 characters
    translation_table = str.maketrans(standard_alphabet, custom_alphabet)
    custom_encoded_str = encoded_str.translate(translation_table)
    
    return custom_encoded_str

def decode_custom_base64(encoded_str):
    # Custom Base64 alphabet
    custom_alphabet = "CDEFGHIJKLMNOPQRSTUVWXYZABcdefghijklmnopqrstuvwxyzab0123456789+/"
    
    # Standard Base64 alphabet for translation
    standard_alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    
    # Create a translation table between the custom and standard Base64 characters
    translation_table = str.maketrans(custom_alphabet, standard_alphabet)
    
    # Translate the encoded string to standard Base64 using the custom alphabet
    translated_str = encoded_str.translate(translation_table)
    
    # Decode the translated string using standard Base64
    decoded_bytes = base64.b64decode(translated_str)
    
    # Convert bytes to a string (assuming the decoded data is text)
    decoded_str = decoded_bytes.decode('utf-8', errors='ignore')
    
    return decoded_str

# Example usage
encoded_str = encode_custom_base64("hostname")
decoded_str = decode_custom_base64(encoded_str)
print(f"Encoded string: {encoded_str}")
print(f"Decoded string: {decoded_str}")